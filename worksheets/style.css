#grid_container{display: grid;
    width: 400px;
    height: 400px;
    grid-template-rows: repeat(var(--grid-rows),1fr);
    grid-template-columns: repeat(var(--grid-cols), 1fr);  
    background: white;
    border: 1px solid black;}

/* .gridItem{
    background-color: rgba(255, 255, 255, 0.8);
    border: 1px solid rgba(0, 0, 0, 0.8);
    padding: 20px;
    font-size: 30px;
    text-align: center;
    border-style: double;
} */


*{
    box-sizing: border-box;
}  

body{
    background:aqua;
}

:root{
    --grid-column:1;
    --grid-rows:1;
    
}

/* Wrapper CSS
Featured snippet from the web
A wrapper has no semantic meaning. It simply holds all visual elements and content on the page.
 It's just a generic container. In terms of semantics, <div> is the best choice */

 /* we will try using div for this */

 #wrapper{
    display:flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

 }

 .gridItem{
    border: 1px solid black;
    text-align: center;
 }

 @media screen and (max-width: 480px) {
    #wrapper{
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    #grid_container{
        display: grid;
        width: 300px;
        height: 300px;
        grid-template-rows: repeat(var(--grid-rows),1fr);
        grid-template-columns: repeat(var(--grid-cols, 1fr);  
        border: 1px solid blue;
    }
}

@media screen and (max-height: 420px) {
    #wrapper{
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    #grid_container{
        display: grid;
        width: 300px;
        height: 300px;
        grid-template-rows: repeat(var(--grid-rows),1fr);
        grid-template-columns: repeat(var(--grid-cols), 1fr);  
        border: 1px solid blue;
    }
}

#button{
    margin-bottom: 30px;
    border-radius: 10px;
    text-align: center;
    border-style:solid;
    cursor: pointer;
}